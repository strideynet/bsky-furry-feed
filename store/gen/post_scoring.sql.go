// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: post_scoring.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const DeleteOldPostScores = `-- name: DeleteOldPostScores :execrows
DELETE FROM post_scores
WHERE generated_at < $1::TIMESTAMPTZ
`

func (q *Queries) DeleteOldPostScores(ctx context.Context, before pgtype.Timestamptz) (int64, error) {
	result, err := q.db.Exec(ctx, DeleteOldPostScores, before)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const GetLatestScoreGeneration = `-- name: GetLatestScoreGeneration :one
SELECT ph.generation_seq
FROM post_scores AS ph
WHERE ph.alg = $1
ORDER BY ph.generation_seq DESC
LIMIT 1
`

func (q *Queries) GetLatestScoreGeneration(ctx context.Context, alg string) (int64, error) {
	row := q.db.QueryRow(ctx, GetLatestScoreGeneration, alg)
	var generation_seq int64
	err := row.Scan(&generation_seq)
	return generation_seq, err
}

const MaterializePostScores = `-- name: MaterializePostScores :one
WITH seq AS (SELECT NEXTVAL('post_scores_generation_seq') AS seq)

INSERT INTO post_scores (uri, alg, score, generation_seq)
SELECT
    cp.uri AS uri,
    'classic' AS alg,
    (
        SELECT COUNT(*)
        FROM candidate_likes AS cl
        WHERE cl.subject_uri = cp.uri AND cl.deleted_at IS NULL
    )
    / (EXTRACT(EPOCH FROM NOW() - cp.indexed_at) / (60 * 60) + 2)
    ^ 1.85 AS score,
    (SELECT seq FROM seq) AS generation_seq
FROM candidate_posts AS cp
WHERE
    cp.deleted_at IS NULL
    AND cp.indexed_at >= $1::TIMESTAMPTZ
RETURNING (SELECT seq FROM seq)
`

func (q *Queries) MaterializePostScores(ctx context.Context, after pgtype.Timestamptz) (int64, error) {
	row := q.db.QueryRow(ctx, MaterializePostScores, after)
	var seq int64
	err := row.Scan(&seq)
	return seq, err
}
