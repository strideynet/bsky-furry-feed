// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feed_NewFurryNew.gen.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getNewFurryNewFeed = `-- name: GetNewFurryNewFeed :many
SELECT
	cp.uri, cp.actor_did, cp.created_at, cp.indexed_at, cp.is_hidden, cp.deleted_at, cp.raw, cp.hashtags, cp.has_media, cp.self_labels, cp.has_video
FROM
	candidate_posts AS cp
INNER JOIN
	candidate_actors AS ca ON cp.actor_did = ca.did
WHERE
	(ca.status = 'approved') AND
	(cp.is_hidden = FALSE) AND
	(cp.deleted_at IS NULL) AND
	(ARRAY['furry', 'furryart'] && cp.hashtags) AND
	(NOT ARRAY['aiart'] && cp.hashtags) AND
	(COALESCE(cp.has_media, cp.has_video, FALSE)) AND
	(NOT (ARRAY['nsfw', 'mursuit', 'murrsuit', 'nsfwfurry', 'furrynsfw'] && cp.hashtags) OR (ARRAY['porn', 'nudity', 'sexual'] && cp.self_labels)) AND
	(cp.created_at > NOW() - INTERVAL '7 day') AND
	(cp.indexed_at > NOW() - INTERVAL '7 day') AND
	(cp.indexed_at < $1)
ORDER BY
	cp.indexed_at DESC
LIMIT $2
`

type GetNewFurryNewFeedParams struct {
	CursorTimestamp pgtype.Timestamptz
	Limit           int32
}

func (q *Queries) GetNewFurryNewFeed(ctx context.Context, arg GetNewFurryNewFeedParams) ([]CandidatePost, error) {
	rows, err := q.db.Query(ctx, getNewFurryNewFeed, arg.CursorTimestamp, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CandidatePost
	for rows.Next() {
		var i CandidatePost
		if err := rows.Scan(
			&i.URI,
			&i.ActorDID,
			&i.CreatedAt,
			&i.IndexedAt,
			&i.IsHidden,
			&i.DeletedAt,
			&i.Raw,
			&i.Hashtags,
			&i.HasMedia,
			&i.SelfLabels,
			&i.HasVideo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
